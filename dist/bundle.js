!function(n){var e={};function t(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return n[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,i){t.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:i})},t.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=51)}([function(n,e,t){var i,r,o={},a=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=i.apply(this,arguments)),r}),l=function(n){var e={};return function(n){if("function"==typeof n)return n();if(void 0===e[n]){var t=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}}(),s=null,c=0,d=[],f=t(33);function u(n,e){for(var t=0;t<n.length;t++){var i=n[t],r=o[i.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](i.parts[a]);for(;a<i.parts.length;a++)r.parts.push(b(i.parts[a],e))}else{var l=[];for(a=0;a<i.parts.length;a++)l.push(b(i.parts[a],e));o[i.id]={id:i.id,refs:1,parts:l}}}}function p(n,e){for(var t=[],i={},r=0;r<n.length;r++){var o=n[r],a=e.base?o[0]+e.base:o[0],l={css:o[1],media:o[2],sourceMap:o[3]};i[a]?i[a].parts.push(l):t.push(i[a]={id:a,parts:[l]})}return t}function h(n,e){var t=l(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=d[d.length-1];if("top"===n.insertAt)i?i.nextSibling?t.insertBefore(e,i.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),d.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=l(n.insertInto+" "+n.insertAt.before);t.insertBefore(e,r)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=d.indexOf(n);e>=0&&d.splice(e,1)}function g(n){var e=document.createElement("style");return n.attrs.type="text/css",v(e,n.attrs),h(n,e),e}function v(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function b(n,e){var t,i,r,o;if(e.transform&&n.css){if(!(o=e.transform(n.css)))return function(){};n.css=o}if(e.singleton){var a=c++;t=s||(s=g(e)),i=w.bind(null,t,a,!1),r=w.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",v(e,n.attrs),h(n,e),e}(e),i=function(n,e,t){var i=t.css,r=t.sourceMap,o=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||o)&&(i=f(i));r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([i],{type:"text/css"}),l=n.href;n.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,t,e),r=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=g(e),i=function(n,e){var t=e.css,i=e.media;i&&n.setAttribute("media",i);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),r=function(){m(t)});return i(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;i(n=e)}else r()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=p(n,e);return u(t,e),function(n){for(var i=[],r=0;r<t.length;r++){var a=t[r];(l=o[a.id]).refs--,i.push(l)}n&&u(p(n,e),e);for(r=0;r<i.length;r++){var l;if(0===(l=i[r]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete o[l.id]}}}};var x,y=(x=[],function(n,e){return x[n]=e,x.filter(Boolean).join("\n")});function w(n,e,t,i){var r=t?"":i.css;if(n.styleSheet)n.styleSheet.cssText=y(e,r);else{var o=document.createTextNode(r),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(o,a[e]):n.appendChild(o)}}},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",i=n[3];if(!i)return t;if(e&&"function"==typeof btoa){var r=(a=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=i.sources.map(function(n){return"/*# sourceURL="+i.sourceRoot+n+" */"});return[t].concat(o).concat([r]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var i={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(i[o]=!0)}for(r=0;r<n.length;r++){var a=n[r];"number"==typeof a[0]&&i[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){t(19),angular.module("studyApp").component("appShare",{template:t(17),bindings:{data:"<",removeFile:"&",renameFile:"&",downloadedFile:"&",index:"=",showDetails:"&"},controller:function(){}})},function(n,e){n.exports='<main class="details-container">\n    <div class="container">\n        <div class="main-container">\n            <section class="details-info--file">\n                \n                <ul class="details-action-links">\n                    <li ng-bind="\'File name: \' + $ctrl.shareDetails.files[0].filename "></li>\n                    <li ng-bind="$ctrl.shareDetails.downloads + \' downloads\'"></li>\n                    <li>Created: <span ng-bind="$ctrl.shareDetails.created | dateFilter"></span></li>\n                    <li ng-bind="$ctrl.shareDetails.fileseed | fileAmountFilter"></li>\n                    <li ng-bind="$ctrl.shareDetails.sizeCache | sizeFilter"></li>\n                    \n\n                </ul>\n            </section>\n\n            <section class="details-file--example">\n                <h2 ng-bind="$ctrl.shareDetails.title || \'Some file name\'"><button ng-click="">RENAME</button></h2>\n                <div class="details-file-preview-container">\n                    <div class="details-info-container">\n                        <h4>No preview available for this type of file.</h4>\n                        <h3><a class="file-details--download" href="#downloadFile">Download</a> <em>examples.desktop</em></h3>\n                    </div>\n\n                </div>\n            </section>\n        </div>\n    </div>\n</main>'},function(n,e,t){(n.exports=t(1)(!1)).push([n.i,".main-container {\n    display: flex;\n\n    justify-content: space-between;\n}\n\n.details-info--file {\n    flex-basis: 15%;\n    flex-shrink: 0;\n    display: block;\n    border: 1px solid lightgrey;\n    background-color: #f2f2f2;\n    margin-right: 2rem;\n}\n\n.details-info-list {\n    list-style: none;\n}\n\n.details-info-list > li {\n    color: darkgrey;\n}\n\n.details-action-links {\n    list-style: none;\n    margin-top: 1rem;\n}\n\n.details-action-links > li {\n\n}\n\n.details-action-links > li > a:link, a:visited {\n    text-decoration: none;\n    color: blue;\n}\n.details-action-links > li > a:hover {\n    text-decoration: underline;\n}\n\n.details-file--example {\n    flex-basis: 80%;\n    display: block;\n\n}\n\n.details-file--example > h2 {\n    font-weight: 300;\n    font-size: 1rem;\n    padding: 5px 0 5px 10px;\n    color: grey;\n}\n\n.details-file-preview-container {\n    height: 400px;\n    width: 100%;\n    background-color: #f2f2f2;\n    border: 2px solid lightgrey;\n    position: relative;\n}\n\n.details-info-container {\n    display: block;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n",""])},function(n,e,t){var i=t(4);"string"==typeof i&&(i=[[n.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(0)(i,r);i.locals&&(n.exports=i.locals)},function(n,e,t){t(5),angular.module("studyApp").component("fileDetails",{template:t(3),bindings:{share:"<",rename:"&",remove:"&",shareDetails:"<"},controller:function(){}})},function(n,e){n.exports='<section>\n    <div class="container">\n        <div class="acc-cont">\n            <div class="acc">\n                <h2 class="acc-head">asdadsdsa</h2>\n            </div>\n            <div class="acc-det-list">\n                <div class="ul">qweqwe</div>\n            </div>\n            \n        </div>\n    </div>\n</section>'},function(n,e,t){angular.module("studyApp").component("studyAccountDetails",{template:t(7),bindings:{},controller:function(){}})},function(n,e){n.exports='\n\n\x3c!-- GRID WITH ALL THE FILES INSIDE --\x3e\n<section >\n    <div class="container">\n            \x3c!-- Show msg with amount of matches only when  it differes from the default value --\x3e\n            <h3 ng-hide="results.length == $ctrl.fileList.length" class="coincidence">{{results.length}} matche(s)</h3>\n        <div class="flex-grid">\n\n            \n              \n            \x3c!-- Iterating through array and building the share items --\x3e\n            <div ng-repeat="item in $ctrl.fileList | shareNameFilter:$ctrl.filter as results" class="fileItem">\n               \n                <app-share    \n                    rename-file="$ctrl.renameFile({oldName})"\n                    show-details="$ctrl.onDetailsClick({share})"   \n                    data="item"\n                    downloaded-file="$ctrl.downloadedFile()"\n                    remove-file="$ctrl.removeFile({item: item})"\n                    index="$index">\n            </app-share>\n            </div>\n        </div>\n    </div>\n\n</section>'},function(n,e,t){(n.exports=t(1)(!1)).push([n.i,"\n\n.flex-grid {\n    display: flex;\n    align-items: flex-start;\n    flex-wrap: wrap;\n    justify-content: space-around;\n}\n\n.coincidence {\n    font-size: 1.5rem;\n    color: #333333;\n    text-align: center;\n}\n\n\n.fileItem {\n    flex-basis: 45%;\n    margin: 2rem;\n    display: block;\n    width: 20%;\n    box-shadow: 5px 4px 10px lightgrey;\n    background-color: #f2f2f2;\n    border: 1px solid #ccc;\n    border-radius: 15px;\n    color: #666;\n    font-size: 14px;\n}\n\n\n.fileItem-info {\n\n}\n",""])},function(n,e,t){var i=t(10);"string"==typeof i&&(i=[[n.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(0)(i,r);i.locals&&(n.exports=i.locals)},function(n,e,t){t(11),t(2),angular.module("studyApp").component("fileGrid",{template:t(9),bindings:{fileList:"<",greeting:"<",getName:"<",removeFile:"&",renameFile:"&",downloadedFile:"<",renameFile:"&",filter:"=",getFilteredLength:"&",onDetailsClick:"&"},controller:function(){}})},function(n,e){n.exports='<section>\n    <div class="container">\n        <div class="uploadContainer">\n            <form class="uploadFileContainer">\n\n\n                <input id="uploadbtn" class="inputbtn" name="file" type="file">\n                <label class="labelUpload" for="uploadbtn">Upload files here</label>\n\n            </form>\n        </div>\n       \n    </div>\n</section>\n'},function(n,e,t){(n.exports=t(1)(!1)).push([n.i,".uploadContainer {\n\n\n    margin: auto;\n    width: 40%;\n    position: relative;\n}\n\n.uploadFileContainer {\n    margin: 50px auto 50px auto;\n\n}\n\n#uploadbtn {\n    width: 0.1px;\n    height: 0.1px;\n    opacity: 0;\n    overflow: hidden;\n    position: absolute;\n    z-index: -1;\n    \n}\n\n#uploadbtn + label {\n    font-size: 1.25em;\n    font-weight: 700;\n    padding: 5rem;\n    color: #333333;\n    background-color: #f2f2f2;\n    display: inline-block;\n    cursor: pointer;\n    margin: .3rem 6rem;\n    border: 2px solid transparent;\n    border-radius: 10px;\n}\n\n#uploadbtn:focus + label , #uploadbtn + label:hover {\n    border: 2px dotted #1E90FF;\n}",""])},function(n,e,t){var i=t(14);"string"==typeof i&&(i=[[n.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(0)(i,r);i.locals&&(n.exports=i.locals)},function(n,e,t){t(15),angular.module("studyApp").component("uploadBtn",{template:t(13),controller:["CreateShareService",function(n){this.createShare=function(){let e=prompt("Enter value of share item");n.createShare(e).then(function(n){console.log(n)})}}]})},function(n,e){n.exports='\n\n\n    \x3c!--<h3>{{$ctrl.item}}</h3>--\x3e\n    <h2 ng-bind="$ctrl.data.title || $ctrl.data.files[0].filename" class="fileItem-name"></h2>\n    \x3c!-- <br>\n    <span class="for-renaming">For renaming: </span><h2 ng-bind=" $ctrl.data.title " class="fileItem-name"></h2> --\x3e\n\n    <div class="btn-container">\n        \x3c!-- When we want to use function from upper component - we need to use objects to pass arguments into it --\x3e\n        <button class="button-remove" ng-click="$ctrl.removeFile({item: $ctrl.data})">Remove</button>\n        <button class="button-rename"  ng-click="$ctrl.renameFile({oldName: $ctrl.data.sharename})">Rename</button>\n    </div>\n    <div class="fileItem-info">\n        <ul class="fileItem-info--list">\n            <li ng-bind="$ctrl.data.created | dateFilter"></li>\n            <li ng-bind="$ctrl.data.fileseed | fileAmountFilter"></li>\n            <li ng-bind="$ctrl.data.sizeCache | sizeFilter"></li>\n            <li ng-bind="$ctrl.data.downloads + \' downloaded\'"></li>\n        </ul>\n    </div>\n\n    \x3c!-- Button for increasing the moaunt of downloads  --\x3e\n    <div  class="filePreview-container">\n        <a ng-click="$ctrl.downloadedFile()" href="javascript:void(0)" class="fileDownload">Download</a>\n        \x3c!-- <a ui-sref="shareinfo({sharename: $ctrl.data.sharename})" >Details</a> --\x3e\n        <a ng-click="$ctrl.showDetails({share: $ctrl.data})" href="javascript:void(0)" class="fileDetails">Details</a>\n    </div>\n'},function(n,e,t){(n.exports=t(1)(!1)).push([n.i,".button-rename {\n    display: inline-block;\n    background-color: orange;\n    padding: 5px;\n    flex-basis: 30%;\n    color: #333333;\n    font-size: 1rem;\n    cursor: pointer;\n}\n\n.button-remove {\n    display: inline-block;\n    background-color: orangered;\n    color: #333333;\n    flex-basis: 30%;\n    padding: 5px;\n    cursor: pointer;\n    font-size: 1rem;\n}\n\n.btn-container {\n    display: flex;\n    margin: auto;\n    align-items: center;\n    justify-content: center;\n}\n\n\n.fileItem-info--list {\n    list-style: none;\n    margin: 10px;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n}\n\n.fileItem-info--list > li {\n    display: block;\n    padding: 1rem .3rem .1rem .3rem;\n\n\n    margin: auto;\n    margin-bottom: 1.4rem;\n    border-bottom: 2px solid #ccc;\n}\n\n\n\n.filePreview-container {\n    display: block;\n    margin: auto;\n\n    min-height: 3rem;\n    max-width: 3rem;\n    position: relative;\n    cursor: pointer;\n}\n\n\n.filePreview {\n    font-size: 1rem;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    text-decoration: none;\n}\n\n\n.fileItem-name {\n    text-align: center;\n    font-weight: 300;\n    font-size: 1.7rem;\n    letter-spacing: .1rem;\n    \n    margin: .4rem auto .4rem auto;\n    color: black;\n}\n.for-renaming {\n    font-size: 1.5rem;\n    font-weight: 500;\n}\n\n.for-filtering {\n    font-size: 1.5rem;\n    font-weight: 500;\n}",""])},function(n,e,t){var i=t(18);"string"==typeof i&&(i=[[n.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(0)(i,r);i.locals&&(n.exports=i.locals)},function(n,e){n.exports='\n    <section class="acc">\n        <div class="container">\n            <div class="acc-container">\n                <div class="info-container">\n                    <h3 class="acc-heading">Your account:</h3>\n\n                    <div class="acc-info">\n                        <h3 ng-bind="$ctrl.data.plan"></h3>\n                        <h4 ng-bind="\'Expires: \' + $ctrl.data.expDate"></h4>\n                    </div>\n\n                    <div class="acc-fileQuantity">\n                        <h3 ng-bind="$ctrl.data.fileQuantity | fileAmountFilter"></h3>\n                    </div>\n\n                    <div class="acc-space">\n                        <h3 ng-bind="$ctrl.data.spaceTaken | sizeFilter"></h3>\n                        <h3 ng-bind="$ctrl.data.percentage | percentageFilter"></h3>\n                    </div>\n\n                    <div class="acc-downloads">\n                        <h3 ng-bind="$ctrl.data.downloaded + \' downloads\'"></h3>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>'},function(n,e,t){(n.exports=t(1)(!1)).push([n.i,".acc{\n\n}\n\n.acc-container {\n    background-image: linear-gradient(to bottom, #f2f2f2, #eee);\n    border: 2px solid lightgrey;\n    clip-path: polygon(0% 0%, 100% 0, 100% 75%, 50% 100%, 0% 75%);\n    -webkit-border-radius: 5px;\n    -moz-border-radius: 5px;\n    border-radius: 5px;\n    max-width: 15%;\n    font-size: 11px;\n\n    display: block;\n    padding: 1rem 0 3rem 0;\n    color: #333333;\n\n}\n\n.container {\n    width: 70%;\n    margin: auto;\n\n}\n\n.info-container {\n    display: block;\n}\n\n.acc-heading {\n    /*margin-bottom: 10px;*/\n    /*margin-left: 2rem;*/\n    text-align: center;\n    font-size: 1.3rem;\n    margin-bottom: 1rem;\n}\n\n.acc-info {\n    margin-left: 3rem;\n    margin-bottom: 10px;\n    font-size: .8rem;\n}\n\n.acc-fileQuantity {\n    margin-left: 3rem;\n    margin-bottom: 10px;\n}\n\n.acc-space {\n    margin-left: 3rem;\n    margin-bottom: 10px;\n}\n\n.acc-downloads {\n    margin-left: 3rem;\n    margin-bottom: 10px;\n}",""])},function(n,e,t){var i=t(21);"string"==typeof i&&(i=[[n.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(0)(i,r);i.locals&&(n.exports=i.locals)},function(n,e,t){t(22),angular.module("studyApp").component("studyAppAccount",{template:t(20),bindings:{data:"<"},controller:function(){}})},function(n,e){n.exports='<div class="mainFolderContainer">\n\n\n    \x3c!-- header for the \\full page --\x3e\n    <study-app-header user="$ctrl.userInfo.fullname" logout="$ctrl.logout()"  login="$ctrl.login()"></study-app-header>\n\n    <div class="acc-filter">\n    \x3c!-- unformation about user--\x3e\n    <study-app-account ng-if="$ctrl.userInfo" data="$ctrl.data"></study-app-account>\n    <search-filter on-input-clear="$ctrl.onInputClear()" filtered-length="$ctrl.filteredLength" ng-if="$ctrl.userInfo" filter="$ctrl.filter"></search-filter>\n    </div>\n\n\n    \x3c!-- Button for upoloading files to the array --\x3e\n    <upload-btn ng-if="$ctrl.userInfo"></upload-btn>\n\n    \x3c!-- files grid with all the files according to the array of files --\x3e\n    <file-grid\n                on-details-click="$ctrl.shareInformation(share)"\n                get-filtered-length="$ctrl.getFilteredLength(results)"\n                filter="$ctrl.filter"\n                ng-if="$ctrl.userInfo"\n                downloaded-file="$ctrl.downloadedItem"\n               remove-file="$ctrl.removeItem(item)"\n               rename-file="$ctrl.renameShare(oldName)"\n               file-list="$ctrl.filesArray">\n                \x3c!--rename-share="$ctrl.renameShare(oldName)"--\x3e\n    </file-grid>\n\n    <file-details share-details="$ctrl.shareDetails"  ng-if="$ctrl.shareDetails"></file-details>\n</div>'},function(n,e,t){(n.exports=t(1)(!1)).push([n.i,".acc-filter {\n\n}\n\n*, *::before, *::after {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    box-sizing: border-box;\n}\n\n",""])},function(n,e,t){var i=t(25);"string"==typeof i&&(i=[[n.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(0)(i,r);i.locals&&(n.exports=i.locals)},function(n,e,t){t(26),angular.module("studyApp").component("mainFolder",{template:t(24),bindings:{items:"="},controller:["RemoveShare","RenameShare","ShareItemService","AuthService","LoginService","SharesService",function(n,e,t,i,r,o){var a=this;this.filter="",this.accessToken="",this.shareDetails="",this.data={plan:"",expDate:"never",fileQuantity:0,spaceTaken:0,downloaded:0,percentage:0},this.onInputClear=function(){a.filter=""},this.onFilterChange=function(n){a.filterValue=n,console.log("Length"+a.filesArray)},this.renameShare=function(n){var t=prompt("Enter new value of the following share item please");e.renameShare(n,t,a.accessToken).then(function(n){a.filesArray.forEach((e,t)=>{e.id==n.data.id&&(a.filesArray[t].title=n.data.title)})})},this.login=function(){r.login().then(function(n){a.accessToken=n.data.accesstoken,console.log(n.data.accesstoken),a.userName=n.data.user.fullname,a.userInfo=n.data.user;var e=String(n.data.user.type);a.data.plan=e.charAt(0).toUpperCase()+e.slice(1),t.getShares(a.accessToken).then(function(n){return console.log(n),a.filesArray=n.data,n.data}).then(function(n){var e=0;n.forEach(function(n){e+=n.downloads}),a.data.downloaded=e;var t=0;n.forEach(function(n){t+=n.sizeCache}),a.data.spaceTaken=t;var i=0;n.forEach(function(n){i+=n.fileseed}),a.data.fileQuantity=i,a.data.percentage=t})})},this.shareInformation=function(n){a.shareDetails=n,console.log(n)},this.logout=function(){a.userInfo="",a.shareDetails=""},this.removeItem=function(e){n.removeShare(e.sharename,a.accessToken).then(function(n){a.data.fileQuantity-=e.fileseed,a.data.spaceTaken-=e.sizeCache,a.data.percentage=a.data.spaceTaken}).then(function(n){t.getShares(a.accessToken).then(function(n){a.filesArray=n.data})})},this.downloadedItem=function(){a.data.downloaded++}}]})},function(n,e){n.exports='<header>\n  <div class="container">\n    <nav class="nav-container">\n      <div class="list-container">\n        <ul class="nav-list">\n\n          <li ng-click="$ctrl.logggin()" class="nav-btn">Home</li>\n\n          \x3c!-- Element shown if user is authencticated --\x3e\n          <li ng-if="$ctrl.user" class="nav-btn" ng-bind="$ctrl.user"></li>\n          <li ng-if="!$ctrl.user" class="nav-btn" ng-click="$ctrl.login()">Log In</li>\n\n\n          <li class="nav-btn" ng-if="$ctrl.user" ng-click="$ctrl.logout()">Logout</li>\n\n\n\n        </ul>\n      </div>\n    </nav>\n  </div>\n\n</header>'},function(n,e,t){(n.exports=t(1)(!1)).push([n.i,"\n* {\n    padding: 0;\n    margin: 0;\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\nheader {\n    background-color: #333333;\n}\n\n\n\n.nav-container{\n   display: flex;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n.nav-list {\n    display: flex;\n    align-items: center;\n    height: 100%;\n}\n\n.nav-btn {\n    display: block;\n\n    font-size: 1.3rem;\n\n    color: white;\n    text-transform: uppercase;\n    font-weight: 300;\n    padding: 5px 10px;\n    border-bottom: 3px solid transparent;\n}\n\n.nav-btn:hover, .nav-btn:active {\n    border-bottom: 3px solid #eee;\n    cursor: pointer;\n}",""])},function(n,e,t){var i=t(29);"string"==typeof i&&(i=[[n.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(0)(i,r);i.locals&&(n.exports=i.locals)},function(n,e,t){t(30),angular.module("studyApp").component("studyAppHeader",{template:t(28),bindings:{user:"<",logout:"&",login:"&"},controller:["LoginService",function(n){this.logggin=function(){n.login().then(function(n){console.log(n)})}}]})},function(n,e){n.exports='<section>\n    <div class="container">\n        <div class="filter">\n            <div class="filter__heading">\n                <h3 class="filter__heading-msg">Search your files</h3>\n            </div>\n            <div class="filter__input">\n                <input class="filter__input-field" placeholder="Enter search value here..." ng-model="$ctrl.filter" type="text"/>\n                       \x3c!--ng-change="$ctrl.filter($ctrl.filterValue)" --\x3e\n\n            </div>\n            <div ng-show="$ctrl.filter" class="filter__info">\n                \x3c!-- <h4 class="filter__info-coincidences"><span ng-bind="$ctrl.filteredLength"></span> matches</h4> --\x3e\n                <a class="filter__info-clear" href="javascript:void(0)" ng-click="$ctrl.onInputClear()">Clear</a>\n            </div>\n        </div>\n    </div>\n</section>'},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,i=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var r,o=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?n:(r=0===o.indexOf("//")?o:0===o.indexOf("/")?t+o:i+o.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(n,e,t){(n.exports=t(1)(!1)).push([n.i,'.filter{\n    display: block;\n    margin: auto;\n    width: 50%;\n}\n\n.filter__heading{\n    margin-bottom: 1.5rem;\n}\n\n.filter__heading-msg {\n    color: #333333;\n    font-size: 30px;\n    text-align: center;\n    letter-spacing: .1rem;\n}\n\n.filter__input {\n\n}\n\ninput[type="text"], input[type="text"]:focus {\n    font-size: 20px;\n    border-style: double;\n    border-color: #1ebfff; \n    display: block;\n    width: 80%;\n    margin: auto;\n    height: 2rem;\n    \n    outline: none;\n    padding-left: 1rem;\n    border-width: 0 0 3px 0;\n}\n\n.filter__info {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    margin: 1rem auto 2rem auto;\n    width: 80%;\n    \n}\n\n.filter__info-coincidences{\n    font-size: 1rem;\n}\n\n.filter__info-clear {\n    font-size: 1rem;\n}',""])},function(n,e,t){var i=t(34);"string"==typeof i&&(i=[[n.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(0)(i,r);i.locals&&(n.exports=i.locals)},function(n,e,t){t(35),angular.module("studyApp").component("searchFilter",{template:t(32),bindings:{filter:"=",filteredLength:"<",onInputClear:"&"},controller:function(){}})},function(n,e){angular.module("studyApp").service("AuthService",["$http",class{constructor(n){this.http=n}getUser(n){return this.http({method:"POST",url:`http://localhost:8080/1/users/me?accesstoken=${n}`})}}])},function(n,e){angular.module("studyApp").service("SharesService",["$q",class{constructor(n){this.q=n}getShares(){return this.q(function(n,e){n([{name:"Dummy 2",dateCreated:new Date,innerFiles:3,fileSize:560,downloadedTimes:2},{name:"Dummy 3",dateCreated:new Date,innerFiles:8,fileSize:17,downloadedTimes:3},{name:"Dummy 4",dateCreated:new Date,innerFiles:1,fileSize:9,downloadedTimes:1}])})}}])},function(n,e){angular.module("studyApp").service("ShareItemService",["$http",class{constructor(n){this.http=n}getShares(n){return this.http({method:"GET",url:`http://localhost:8080/1/shares?accesstoken=${n}`})}}])},function(n,e){angular.module("studyApp").service("LoginService",["$http",class{constructor(n){this.http=n}login(){return this.http({method:"POST",url:"http://localhost:8080/1/users/login",data:{email:"jacksterwow@gmail.com",password:"qwe200020002000"}})}}])},function(n,e){angular.module("studyApp").service("RenameShare",["$http",class{constructor(n){this.http=n}renameShare(n,e,t){return this.http({method:"POST",url:`http://localhost:8080/1/shares/${n}/update?accesstoken=${t}`,data:{title:e}})}}])},function(n,e){angular.module("studyApp").service("RemoveShare",["$http",class{constructor(n){this.http=n}removeShare(n,e){return this.http({method:"POST",url:`http://localhost:8080/1/shares/${n}/destroy?accesstoken=${e}`})}}])},function(n,e){angular.module("studyApp").service("CreateShareService",["$http",class{constructor(n){this.http=n}createShare(n){return this.http({method:"POST",url:"http://localhost:8080/1/shares/create?accesstoken=a.0.user-J7kUBAbnVzOdendelXu1B8RpfXJLhIWuFNzoC-.1520680455.a572f8074e31dcf14a25ffad5f9dd3b9ffa68b00",data:{title:`${n}`}})}}])},function(n,e){angular.module("studyApp").filter("shareNameFilter",function(){return function(n,e){var t=[];if(console.log(n),n)for(var i=0;i<n.length;i++)n[i].title&&-1!=n[i].title.indexOf(e)&&t.push(n[i]),n[i].title||-1!=n[i].files[0].filename.indexOf(e)&&t.push(n[i]);return t}})},function(n,e){angular.module("studyApp").filter("sizeFilter",function(){return function(n){let e,t=parseInt(n);return t<1e6&&(e=n+" KB"),t>1e6&&(e=(t/1e6).toFixed(2)+" MB"),e}})},function(n,e){angular.module("studyApp").filter("percentageFilter",function(){return function(n){return(parseInt(n)/25e5).toFixed(2)+"% of 250MB"}})},function(n,e){angular.module("studyApp").filter("dateFilter",()=>n=>{if(n){let e=new Date(1e3*n),t=["Sun","Mon","Tue","Wed","Thur","Fri","Sat"][e.getDay()],i=e.getDate();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${i}, ${e.getFullYear()}`}})},function(n,e){angular.module("studyApp").filter("fileAmountFilter",function(){return function(n){return 1==n?`${n} file`:n>1?`${n} files`:void 0}})},function(n,e){angular.module("studyApp").directive("afterRepeat",function(){return function(n,e,t){e.bind("$destroy",function(e){n.$last&&n.$eval(t.afterRepeat)})}})},function(n,e){angular.module("studyApp").service(["$http","getShareService",class{constructor(n){this.http=n}getShare(n){return this.http({method:"GET",url:`http://localhost:8080/1/shares/${n}`})}}])},function(n,e,t){angular.module("studyApp",["ui.router"]).config(["$urlRouterProvider","$stateProvider",(n,e)=>{n.otherwise(""),e.state({name:"home",url:"/",template:"<main-folder></main-folder>"}).state({name:"details",url:"/account-details",template:"<study-account-details></study-account-details>"}).state({name:"shareinfo",url:"/:sharename",template:"<file-details></file-details>"})}]),t(50),t(49),t(48),t(47),t(46),t(45),t(44),t(43),t(42),t(41),t(40),t(39),t(38),t(37),t(36),t(31),t(27),t(23),t(2),t(16),t(12),t(8),t(6)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,